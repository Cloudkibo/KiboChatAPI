{
  "name": "kibo-chat-api",
  "version": "v1",
  "description": "Welcome to the KiboChat API documentation! Our API provides flexible tools that can be used in the creation of new, outstanding projects. Please note that this documentation refers to the API 1.0 version. API 2.0 version is currently under construction and will be released soon.  Build something great!  ## Basic Usage All KiboChat API requests start with `https://api.cloudkibo.com/api/`  The next segment of the URI path depends on the type of request. For example:  `https://api.cloudkibo.com/v1/users/me`  to get all details of a logged in user.  ## Authentication Each client application needs to login with facebook and send the facebook token to server with each request.  ## Error Handling Errors are returned using standard HTTP error code syntax. In general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error (bad or missing parameters, not authenticated etc.), and codes in the 5xx range indicate an error with KiboSupportâ€™s servers. Any additional info is included in the body of the return call, JSON-formatted. In some old API requests, we return JSON body with status key in it.  ## Cross-Domain All cross-domain API requests made by a web browser are denied for security reasons. It means that browser-based requests are not allowed from 3rd party domains including localhost. All API calls include an API key that could be easily stolen when making a request using a web browser. It means you should use backend languages for API.  ## Limits (under construction on API side) Be nice. If you're sending too many requests too quickly, we'll send back a `503` error code (server unavailable). You are limited to 5000 requests per hour per `access_token` or `client_id` overall. Practically, this means you should (when possible) authenticate users so that limits are well outside the reach of a given user.  ## Structure  ### JSONP (under construction, will be released in next version of API) If you're writing an AJAX application, and you'd like to wrap our response with a callback, all you have to do is specify a callback parameter with any API call: ``` https://api.cloudkibo.com/v1/companyprofile?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&callback=callbackFunction ``` Would respond with: ```js callbackFunction({     ... }); ``` ",
  "main": "index.js",
  "scripts": {
	"prestart": "npm install",
	"start": "node index.js"
  },  
  "keywords": [
    "swagger"
  ],
  "license": "Apache-2.0",
  "private": true,
  "dependencies": {
    "connect": "^3.2.0",
    "js-yaml": "^3.3.0",
    "swagger-tools": "0.10.1"
  }
}
